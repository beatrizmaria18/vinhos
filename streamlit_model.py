import streamlit as st
import pandas as pd
from pycaret.classification import load_model, predict_model

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sommelier Digital: Te ajudando a escolher o melhor vinho!",
    page_icon="üç∑",
    layout="wide"
)

# --- CABE√áALHO ---
st.title("üç∑ Sommelier Digital")
st.markdown("""
*Um guia para n√£o cair em armadilhas na adega.*  
*Porque vida √© muito curta para tomar um vinho ruim...*
""")

# --- SE√á√ÉO 1: EXPLICA√á√ÉO DO PROBLEMA ---
with st.expander("üîç Por que usar Machine Learning para escolher vinho?", expanded=True):
    st.markdown("""
    ### O Desafio  
    Nem todo vinho com r√≥tulo bonito √© bom! Este modelo prev√™ se um vinho √© bom (nota > 6.5) ou ruim (nota ‚â§ 6.5) com base em caracter√≠sticas qu√≠micas que voc√™ encontra no r√≥tulo!  

    ### O Dataset  
    Foram usados dados de vinhos tintos e brancos com:  
    - 12 vari√°veis qu√≠micas (acidez, a√ß√∫car residual, pH, etc.).  
    - Avalia√ß√µes de especialistas (0 a 10).  
    - Target: `vinho_bom` (0 ou 1, baseado na nota).  
    """)
    

# --- SE√á√ÉO 2: PROCESSO E JUSTIFICATIVAS ---
with st.expander("‚öôÔ∏è Como a M√°gica Acontece:", expanded=False):
    st.markdown("""
    ### Pr√©-Processamento: Limpeza e Padroniza√ß√£o  
    1. Vari√°veis Categ√≥ricas:  
       - `type` (tinto/branco) virou `type_white` (0 ou 1).  
    2. Padroniza√ß√£o:  
       - Todas as features num√©ricas foram escalonadas para m√©dia 0 e desvio padr√£o 1.  
    3. Target:  
       - Notas foram transformadas em bin√°rio: 0 (‚â§6.5) ou 1 (>6.5).  

    ### Por Que Extra Trees?  
    - Alta Acur√°cia (88.8%) e AUC (0.92): Melhor que outros modelos testados.  
    - Robustez: Menos propenso a overfitting.  
    - Velocidade: R√°pido para deploy em apps.  
    """)

# --- SE√á√ÉO 3: INTERATIVIDADE ---
st.header("üéØ Teste Voc√™ Mesmo!")
st.markdown("""
*Preencha as informa√ß√µes do r√≥tulo ao lado e descubra se o vinho √© bom ou um desastre total.*  

""")

with st.sidebar:
    st.header("üßæ Detalhes do R√≥tulo")
    tipo_vinho = st.radio("Tipo do Vinho", ["Tinto", "Branco"], index=0, help="Tinto ou Branco?")
    alcool = st.slider("Teor Alco√≥lico (% ABV)", 5.0, 15.0, 12.5, 0.1, help="Quanto maior, mais encorpado!")
    acucar = st.slider("A√ß√∫car Residual (g/dm¬≥)", 0.0, 20.0, 2.5, 0.1, help="Seco (<4) ou Doce (>45)?")
    ph = st.slider("pH (acidez)", 2.8, 4.0, 3.4, 0.1, help="Quanto menor, mais √°cido!")
    acidez = st.slider("Acidez Vol√°til (g/dm¬≥)", 0.1, 1.0, 0.5, 0.01, help="Cuidado com valores >0.6")
    sulfatos = st.slider("Sulfatos (g/dm¬≥)", 0.3, 1.5, 0.8, 0.1, help="Conservantes: mais = maior longevidade.")

modelo = load_model('modelo_vinho_completo2') 

# Bot√£o de predi√ß√£o
if st.button("üçæ Verificar Qualidade"):

    input_data = pd.DataFrame({
        'type_white': [1 if tipo_vinho == "Branco" else 0],
        'alcohol': [alcool],
        'residual sugar': [acucar],
        'pH': [ph],
        'volatile acidity': [acidez],
        'sulphates': [sulfatos]
    })
    
    # Fazer a predi√ß√£o
    prediction = predict_model(modelo, data=input_data)
    qualidade = prediction['prediction_label'][0]
    prob_bom = prediction['prediction_score_1'][0]  # Probabilidade de ser "bom"
    
    # Exibir resultado
    if qualidade == 1:
        st.balloons()
        st.success(f"**‚úÖ BOM (probabilidade: {prob_bom*100:.1f}%)**\n\nEste vinho tem alta chance de ser aprovado por especialistas!")
    else:
        st.error(f"**‚ùå N√ÉO √â BOM (probabilidade: {(1-prob_bom)*100:.1f}%)**\n\nMelhor deixar na prateleira...")
# --- RODAP√â DIVERTIDO ---
st.markdown("---")
st.markdown("""
Feito com ‚ù§Ô∏è por Beatriz Trindade.  
Dados reais, paix√£o por vinho e um pouco de Python.  
""")

